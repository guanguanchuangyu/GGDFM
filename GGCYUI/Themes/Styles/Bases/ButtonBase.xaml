<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:GGCYUI.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="BaseStyle.xaml"/>
        <ResourceDictionary Source="/GGCYUI;component/Themes/Basic/Sizes.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="ButtonBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="ButtonBase">
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Padding" Value="{DynamicResource DefualtControlPadding}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource TextFore}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>
    <Style x:Key="ButtonDefaultStyle" TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{DynamicResource MainBg}"/>
        <Setter Property="controls:BorderElement.CornerRadius" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(controls:BorderElement.CornerRadius),RelativeSource={RelativeSource Mode=TemplatedParent}}"></Border>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                <Path  x:Name="PathMain" Width="{Binding Path=(controls:IconElement.Width),RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       Height="{Binding Path=(controls:IconElement.Height),RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                                       Data="{Binding Path=(controls:IconElement.Geometry),RelativeSource={RelativeSource Mode=TemplatedParent}}"></Path>
                                <ContentPresenter x:Name="ContentPersentMain" VerticalAlignment="Center" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  Margin="{DynamicResource DefaultMenuContentLeft}"></ContentPresenter>
                            </StackPanel>
                        </Border>
                    </controls:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ContentPersentMain"></Setter>
                        </Trigger>
                        <Trigger Property="controls:IconElement.Geometry" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PathMain"></Setter>
                            <Setter Property="Margin" Value="0" TargetName="ContentPersentMain"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.4"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>